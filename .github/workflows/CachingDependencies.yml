name: Caching with Tuist Dependencies

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "*" ]

env:
  CACHED_DEPENDENCY_PATHS: ${{ github.workspace }}/Tuist/Dependencies

jobs:
  caching-dependencies: # job_id = caching-dependencies
    name: 🧩 Caching Dependencies
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute dependency cache key
        id: compute_hash
        run: echo "hash=${{ hashFiles('Tuist/Dependencies.swift') }}" >> $GITHUB_OUTPUT 
        # hashFiles는 해당 파일을 해싱한다. 의존성 변화가 있으면 새로운 해싱이 들어감 
        # steps.[step_id].outputs.[담은변수] , 여기서는  step_id = compute_hash , [담은변수] = hash

      - name: Check dependency key
        uses: actions/cache@v3 # action에 존재하는 cache에 저장함 
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }} 
          key: ${{ steps.compute_hash.outputs.hash }} 
          
          # path에 있는 파일을 
          # key에 저장  , 존재 유무를 steps.[step_id].outputs.cache-hit 으로  true or false로 던져줌

      - name: Install tuist
        if: steps.cache_dependencies.outputs.cache-hit != 'true'  
        run: curl -Ls https://install.tuist.io | bash

        #if는 해당 값이 true면 이 동작을 실행하고 false이면 실핼하지 않는다.

      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: tuist fetch

    outputs:
      dependency_cache_key: ${{ steps.compute_hash.outputs.hash }} # 다른 job에서 접근할 수 있도록 